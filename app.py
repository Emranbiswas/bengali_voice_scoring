# import streamlit as st
# from audio_utils import transcribe_audio_file, speak_bengali_text
# from model import get_call_score_and_reason
# import os

# # Streamlit Page Config
# st.set_page_config(page_title="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡¶£‡ßç‡¶†‡¶∏‡ßç‡¶¨‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç")

# # Title
# st.title("üìû ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡¶£‡ßç‡¶†‡¶∏‡ßç‡¶¨‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç")
# # st.write("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø .wav ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶Æ‡ßç‡¶∞‡¶§‡¶æ, ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶ì ‡¶Ö‡¶∏‡¶≠‡ßç‡¶Ø‡¶§‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶æ‡¶®‡•§")

# # Upload WAV file
# uploaded_file = st.file_uploader("üîº ‡¶è‡¶ï‡¶ü‡¶ø WAV ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", type=["wav"])

# if uploaded_file is not None:
#     with open("temp_audio.wav", "wb") as f:
#         f.write(uploaded_file.getbuffer())

#     st.audio("temp_audio.wav", format="audio/wav")

#     try:
#         transcription = transcribe_audio_file("temp_audio.wav", language_code="bn-BD")
#     except Exception as e:
#         st.error(f"‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}")
#         transcription = None

#     if transcription:
#         st.success("‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
#         st.markdown("**üó£Ô∏è ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü:**")
#         st.write(transcription)

#         st.info("‚ú≥Ô∏è ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
#         score_result = get_call_score_and_reason(transcription)

#         st.success("üîç ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:")
#         st.markdown(f"**{score_result}**")


import streamlit as st
from audio_utils import transcribe_audio_file
from model import get_call_score_and_reason
import os
from concurrent.futures import ThreadPoolExecutor

# Streamlit Page Config
st.set_page_config(page_title="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡¶£‡ßç‡¶†‡¶∏‡ßç‡¶¨‡¶∞ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç")
st.title("üìû ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡¶£‡ßç‡¶†‡¶∏‡ßç‡¶¨‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç")

# Upload multiple WAV files
uploaded_files = st.file_uploader("üîº ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï WAV ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", type=["wav"], accept_multiple_files=True)

# Worker functions
def transcribe_worker(path):
    try:
        return transcribe_audio_file(path, language_code="bn-BD")
    except Exception as e:
        st.error(f"‚ùå ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}")
        return None

def score_worker(transcript):
    try:
        return get_call_score_and_reason(transcript)
    except Exception as e:
        st.error(f"‚ùå ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}")
        return None

if uploaded_files:
    # Write uploaded files to temporary disk
    temp_file_paths = []
    for idx, uploaded_file in enumerate(uploaded_files):
        temp_file_path = f"temp_audio_{idx}.wav"
        with open(temp_file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        temp_file_paths.append(temp_file_path)

    # Display audio for each file one by one
    for file_path in temp_file_paths:
        st.audio(file_path, format="audio/wav")

    # Process transcription and scoring using ThreadPoolExecutor
    with st.spinner("üîÑ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
        # Create a ThreadPoolExecutor to handle transcription and scoring
        with ThreadPoolExecutor(max_workers=5) as executor:
            # Transcribe all files
            transcriptions = list(executor.map(transcribe_worker, temp_file_paths))

            # Process the transcription results
            for idx, transcription in enumerate(transcriptions):
                if transcription:
                    st.success(f"‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì {idx + 1} ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                    st.markdown(f"**üó£Ô∏è ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü {idx + 1}:**")
                    st.write(transcription)

                    # Get score for the transcription
                    score_result = score_worker(transcription)

                    if score_result:
                        st.success(f"üìä ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ {idx + 1}:")
                        st.markdown(f"**{score_result}**")
                    else:
                        st.error(f"‚ùå ‡¶∏‡ßç‡¶ï‡ßã‡¶∞‡¶ø‡¶Ç {idx + 1} ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                else:
                    st.error(f"‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì {idx + 1} ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

